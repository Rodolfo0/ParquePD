// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ParqueProcesoDesarrollo.Web.Data;

namespace ParqueProcesoDesarrollo.Web.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20220417235425_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.9")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Attraction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("Attractions");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.CashBox", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("StatusId");

                    b.ToTable("CashBoxes");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.CollarSize", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("CollarSizes");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ConsumableWarehouse", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SupplyId");

                    b.ToTable("ConsumableWarehouses");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Employees");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.IvaType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("InterestRate")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("IvaTypes");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Place")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.MachineReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PaymentMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("PaymentMachineId");

                    b.ToTable("MachineReports");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Maintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfLastOverhaul")
                        .HasColumnType("datetime2");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("MaintenanceDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("TypeOfMaintenanceId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("TypeOfMaintenanceId");

                    b.HasIndex("UserId");

                    b.ToTable("Maintenances");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.NecklaceSaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CollarSizeId")
                        .HasColumnType("int");

                    b.Property<string>("FixedIpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TicketSaleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CollarSizeId");

                    b.HasIndex("TicketSaleId");

                    b.ToTable("NecklaceSaleDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<int?>("PrintingMachineId")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("TimeOfEntry")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("TimeOfPayment")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("PrintingMachineId");

                    b.HasIndex("StatusId");

                    b.ToTable("ParkingTickets");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicketPaymentMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("ParkingTicketId")
                        .HasColumnType("int");

                    b.Property<int?>("PaymentMachineId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingTicketId");

                    b.HasIndex("PaymentMachineId");

                    b.ToTable("ParkingTicketPaymentMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PaymentMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("BillEntered100")
                        .HasColumnType("int");

                    b.Property<int>("BillEntered50")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyEntered10")
                        .HasColumnType("int");

                    b.Property<int>("CurrencyEntered5")
                        .HasColumnType("int");

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int>("StartBill100")
                        .HasColumnType("int");

                    b.Property<int>("StartBill50")
                        .HasColumnType("int");

                    b.Property<int>("StartCurrency10")
                        .HasColumnType("int");

                    b.Property<int>("StartCurrency5")
                        .HasColumnType("int");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("StatusId");

                    b.ToTable("PaymentMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PrintingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.ToTable("PrintingMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SocialReason")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Providers");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ProviderContact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("BusinessHours")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("PaternalSurname")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<string>("Post")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("ProviderContacts");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("PurchaseHeaderId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("SupplyId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("PurchaseHeaderId");

                    b.HasIndex("SupplyId");

                    b.ToTable("PurchaseDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateofPayment")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfPaymentId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.HasIndex("TypeOfPaymentId");

                    b.ToTable("PurchaseHeader");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ReceivingMachine", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("LocationId")
                        .HasColumnType("int");

                    b.Property<int?>("ParkingTicketId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ParkingTicketId");

                    b.ToTable("ReceivingMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SanitizationProtocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SanitizationProtocols");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SanitizedGame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("AttractionId")
                        .HasColumnType("int");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<string>("Remarks")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<int?>("SanitizationProtocolId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("AttractionId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("SanitizationProtocolId");

                    b.HasIndex("UserId");

                    b.ToTable("SanitizedGames");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Session", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("FinishTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("SessionDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("SessionInterrupted")
                        .HasColumnType("bit");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("Sessions");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SpaRegistration", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DateOfCheckInTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfCheckOutTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Delivered")
                        .HasColumnType("bit");

                    b.Property<int?>("WristbandSaleDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WristbandSaleDetailId");

                    b.ToTable("SpaRegistrations");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Statuses");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Supply", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Barcode")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("ProviderId")
                        .HasColumnType("int");

                    b.Property<double>("UnitPrice")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("ProviderId");

                    b.ToTable("Supplies");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TicketSale", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("CashBoxId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfIssue")
                        .HasColumnType("datetime2");

                    b.Property<int?>("IvaTypeId")
                        .HasColumnType("int");

                    b.Property<double>("Subtotal")
                        .HasColumnType("float");

                    b.Property<double>("Total")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("CashBoxId");

                    b.HasIndex("IvaTypeId");

                    b.ToTable("TicketSales");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfMaintenance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfMaintenances");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfPayment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.HasKey("Id");

                    b.ToTable("TypeOfPayments");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfWristband", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Colour")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.ToTable("TypeOfWristbands");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("HiringDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("MaternalSurname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("ParentalSurname")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("RFC")
                        .IsRequired()
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Salary")
                        .HasColumnType("int");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.VisitorSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int?>("SessionId")
                        .HasColumnType("int");

                    b.Property<int?>("VrEquipmentId")
                        .HasColumnType("int");

                    b.Property<int?>("WristbandSaleDetailId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SessionId");

                    b.HasIndex("VrEquipmentId");

                    b.HasIndex("WristbandSaleDetailId");

                    b.ToTable("VisitorSessions");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.VrEquipment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<DateTime>("DateOfPurchase")
                        .HasColumnType("datetime2");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("StatusId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StatusId");

                    b.ToTable("VrEquipments");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.WristbandSaleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NameOfPersonInCharge")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int?>("TicketSaleId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeOfWristbandId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TicketSaleId");

                    b.HasIndex("TypeOfWristbandId");

                    b.ToTable("WristbandsSaleDetail");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Attraction", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", "Employee")
                        .WithMany("Attractions")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("Attractions")
                        .HasForeignKey("StatusId");

                    b.Navigation("Employee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.CashBox", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", "Employee")
                        .WithMany("CashBoxes")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("CashBoxes")
                        .HasForeignKey("StatusId");

                    b.Navigation("Employee");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ConsumableWarehouse", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Supply", "Supply")
                        .WithMany("ConsumableWarehouses")
                        .HasForeignKey("SupplyId");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.MachineReport", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.PaymentMachine", "PaymentMachine")
                        .WithMany("MachineReports")
                        .HasForeignKey("PaymentMachineId");

                    b.Navigation("PaymentMachine");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Maintenance", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Attraction", "Attraction")
                        .WithMany("Maintenances")
                        .HasForeignKey("AttractionId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", null)
                        .WithMany("Maintenances")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfMaintenance", "TypeOfMaintenance")
                        .WithMany("Maintenances")
                        .HasForeignKey("TypeOfMaintenanceId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Attraction");

                    b.Navigation("TypeOfMaintenance");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.NecklaceSaleDetail", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.CollarSize", "CollarSize")
                        .WithMany("NecklaceSaleDetails")
                        .HasForeignKey("CollarSizeId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.TicketSale", "TicketSale")
                        .WithMany("NecklaceSaleDetails")
                        .HasForeignKey("TicketSaleId");

                    b.Navigation("CollarSize");

                    b.Navigation("TicketSale");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicket", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.PrintingMachine", "PrintingMachine")
                        .WithMany()
                        .HasForeignKey("PrintingMachineId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("ParkingTickets")
                        .HasForeignKey("StatusId");

                    b.Navigation("PrintingMachine");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicketPaymentMachine", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicket", "ParkingTicket")
                        .WithMany("ParkingTicketPaymentMachines")
                        .HasForeignKey("ParkingTicketId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.PaymentMachine", "PaymentMachine")
                        .WithMany("ParkingTicketPaymentMachines")
                        .HasForeignKey("PaymentMachineId");

                    b.Navigation("ParkingTicket");

                    b.Navigation("PaymentMachine");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PaymentMachine", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Location", "Location")
                        .WithMany("PaymentMachines")
                        .HasForeignKey("LocationId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("PaymentMachines")
                        .HasForeignKey("StatusId");

                    b.Navigation("Location");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PrintingMachine", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Location", "Location")
                        .WithMany("PrintingMachines")
                        .HasForeignKey("LocationId");

                    b.Navigation("Location");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("Providers")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ProviderContact", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", "Provider")
                        .WithMany("ProviderContacts")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseDetail", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseHeader", "PurchaseHeader")
                        .WithMany("PurchaseDetails")
                        .HasForeignKey("PurchaseHeaderId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Supply", "Supply")
                        .WithMany("PurchasDetails")
                        .HasForeignKey("SupplyId");

                    b.Navigation("PurchaseHeader");

                    b.Navigation("Supply");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseHeader", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", "Provider")
                        .WithMany("PurchaseHeaders")
                        .HasForeignKey("ProviderId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfPayment", "TypeOfPayment")
                        .WithMany("PurchaseHeaders")
                        .HasForeignKey("TypeOfPaymentId");

                    b.Navigation("Provider");

                    b.Navigation("TypeOfPayment");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ReceivingMachine", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Location", "Location")
                        .WithMany("ReceivingMachines")
                        .HasForeignKey("LocationId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicket", "ParkingTicket")
                        .WithMany("ReceivingMachines")
                        .HasForeignKey("ParkingTicketId");

                    b.Navigation("Location");

                    b.Navigation("ParkingTicket");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SanitizedGame", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Attraction", "Attraction")
                        .WithMany("SanitizedGames")
                        .HasForeignKey("AttractionId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", null)
                        .WithMany("SanitizedGames")
                        .HasForeignKey("EmployeeId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.SanitizationProtocol", "SanitizationProtocol")
                        .WithMany("SanitizedGames")
                        .HasForeignKey("SanitizationProtocolId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Attraction");

                    b.Navigation("SanitizationProtocol");

                    b.Navigation("User");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Session", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("Sessions")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SpaRegistration", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.WristbandSaleDetail", "WristbandSaleDetail")
                        .WithMany("SpaRegistrations")
                        .HasForeignKey("WristbandSaleDetailId");

                    b.Navigation("WristbandSaleDetail");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Supply", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", "Provider")
                        .WithMany("Supplies")
                        .HasForeignKey("ProviderId");

                    b.Navigation("Provider");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TicketSale", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.CashBox", "CashBox")
                        .WithMany("TicketSales")
                        .HasForeignKey("CashBoxId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.IvaType", "IvaType")
                        .WithMany("TicketSales")
                        .HasForeignKey("IvaTypeId");

                    b.Navigation("CashBox");

                    b.Navigation("IvaType");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.User", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.VisitorSession", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Session", "Session")
                        .WithMany("VisitorSessions")
                        .HasForeignKey("SessionId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.VrEquipment", "VrEquipment")
                        .WithMany("VisitorSessions")
                        .HasForeignKey("VrEquipmentId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.WristbandSaleDetail", "WristbandSaleDetail")
                        .WithMany()
                        .HasForeignKey("WristbandSaleDetailId");

                    b.Navigation("Session");

                    b.Navigation("VrEquipment");

                    b.Navigation("WristbandSaleDetail");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.VrEquipment", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.Status", "Status")
                        .WithMany("VrEquipments")
                        .HasForeignKey("StatusId");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.WristbandSaleDetail", b =>
                {
                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.TicketSale", "TicketSale")
                        .WithMany("WristbandSaleDetails")
                        .HasForeignKey("TicketSaleId");

                    b.HasOne("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfWristband", "TypeOfWristband")
                        .WithMany("WristbandSaleDetails")
                        .HasForeignKey("TypeOfWristbandId");

                    b.Navigation("TicketSale");

                    b.Navigation("TypeOfWristband");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Attraction", b =>
                {
                    b.Navigation("Maintenances");

                    b.Navigation("SanitizedGames");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.CashBox", b =>
                {
                    b.Navigation("TicketSales");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.CollarSize", b =>
                {
                    b.Navigation("NecklaceSaleDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Employee", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("CashBoxes");

                    b.Navigation("Maintenances");

                    b.Navigation("SanitizedGames");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.IvaType", b =>
                {
                    b.Navigation("TicketSales");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Location", b =>
                {
                    b.Navigation("PaymentMachines");

                    b.Navigation("PrintingMachines");

                    b.Navigation("ReceivingMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.ParkingTicket", b =>
                {
                    b.Navigation("ParkingTicketPaymentMachines");

                    b.Navigation("ReceivingMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PaymentMachine", b =>
                {
                    b.Navigation("MachineReports");

                    b.Navigation("ParkingTicketPaymentMachines");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Provider", b =>
                {
                    b.Navigation("ProviderContacts");

                    b.Navigation("PurchaseHeaders");

                    b.Navigation("Supplies");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.PurchaseHeader", b =>
                {
                    b.Navigation("PurchaseDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.SanitizationProtocol", b =>
                {
                    b.Navigation("SanitizedGames");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Session", b =>
                {
                    b.Navigation("VisitorSessions");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Status", b =>
                {
                    b.Navigation("Attractions");

                    b.Navigation("CashBoxes");

                    b.Navigation("ParkingTickets");

                    b.Navigation("PaymentMachines");

                    b.Navigation("Providers");

                    b.Navigation("Sessions");

                    b.Navigation("VrEquipments");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.Supply", b =>
                {
                    b.Navigation("ConsumableWarehouses");

                    b.Navigation("PurchasDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TicketSale", b =>
                {
                    b.Navigation("NecklaceSaleDetails");

                    b.Navigation("WristbandSaleDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfMaintenance", b =>
                {
                    b.Navigation("Maintenances");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfPayment", b =>
                {
                    b.Navigation("PurchaseHeaders");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.TypeOfWristband", b =>
                {
                    b.Navigation("WristbandSaleDetails");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.VrEquipment", b =>
                {
                    b.Navigation("VisitorSessions");
                });

            modelBuilder.Entity("ParqueProcesoDesarrollo.Web.Data.Entities.WristbandSaleDetail", b =>
                {
                    b.Navigation("SpaRegistrations");
                });
#pragma warning restore 612, 618
        }
    }
}
